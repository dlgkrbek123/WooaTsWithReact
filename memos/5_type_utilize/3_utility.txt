------------------------------------------------------------------------------------------------------------

1. Partial<T>
=> 부분집합을 만족하는 타입 정의
=> 모든 속성이 옵셔널하게 변하고, 값은 Value => Value | undefined로 변경됨

interface Address {
  email: string;
  address: string;
}

type MyEmail = Partial<Address>;
// type MyEmail = {
//   email?: string | undefined;
//   address?: string | undefined;
// }


2. Pick<T, K>
=> 특정타입에서 몇개의 속성을 선택하여 타입정의
=> 일부 속성만 떼어온 객체 타입을 생성

interface Product {
  id: number;
  name: string;
  price: number;
  brand: string;
  stock: number;
}
type shoppingItem = Pick<Product, "id" | "name" | "price">;
// type shoppingItem = {
//   id: number;
//   name: string;
//   price: number;
// }


3. Omit<T, K>
=> 특정속성만 제거한 타입을 정의
=> Pick의 반대

interface Product {
  id: number;
  name: string;
  price: number;
  brand: string;
  stock: number;
}
type shoppingItem = Omit<Product, "stock">;
// type shoppingItem = {
//   id: number;
//   name: string;
//   price: number;
//   brand: string;
// }


4. Exclude<T, U>
=> T에서 오는 타입중 U에 오는것들을 제외함
=> 유니온에서 특정 타입을 축출하고자 할때 사용
=> T extends U ? never: T;

5. NonNullable<T>
=> type NonNullable<T> = T extends null | undefined : never : T
=> undefined와 null을 제거 가능

------------------------------------------------------------------------------------------------------------

유니온 타입은 실질적으로 합집합이라 OR처럼 쓰기위해서는 서로소를 만들거나 똥꼬쇼를 해야함
=> 일일히 식별자를 매번 넣어줘야 하네...
=> PickOne 커스텀 유틸리티 써보자

=> A일때 B의 속성을 받지 못하고, B일때 A의 속성을 못받게하여 이들의 합집합을 만들면 된다.

type PickOne<T> = {
  [P in keyof T]: Record<P, T[P]> & Partial<Record<Exclude<keyof T, P>, undefined>>;
}[keyof T];

type A = {
  a: string;
}
type B = {
  b: number;
}
type C = {
  c: boolean; 
}

type ABC = PickOne<A & B & C>

------------------------------------------------------------------------------------------------------------

NonNullable 유틸리티 타입을 사용해서 null또는 undefined를 
검사하는 타입가드 함수를 제작가능

function NonNullable<T>(value: T): value is NonNullable<T> {
  return value !== null && value !== undefined
}

------------------------------------------------------------------------------------------------------------

keyof 연산자는 객체타입을 받아 키값을 리터럴 유니온 타입으로 반환

!! 예제
interface ColorType {
  red: string;
  green: string;
  blue: string;
}
type ColorKeyType = keyof ColorType; // 'red' | 'green' | 'blue'


typeof 연산자는 객체타입을 받으므로, 키값을 타입으로 
다루기전에 값 객체를 타입으로 변환해야 한다
=> 변수혹은 속성의 타입을 추론
=> 값의 객체를 추론해서 타입 값을 생성

!!
const colors = {
  red: "#f4",
  green : "#0a",
  blue: "#1a7cff"
}
type ColorsType = typeof colors;
/*
  {
    red: string;
    green: string;
    blue: string;
  }
*/

!! 컴포넌트 예제
const colors = {
  black: "#000000",
  gray: "#222222",
  white: "#FFFFFF",
  mint: "#2ac1bc"
}

const theme = {
  colors: {
    default: colors.gray,
    ...colors
  },
  backgroundColor: {
    default: colors.white,
    gray: colors.gray,
    mint: colors.mint,
    black: colors.black
  },
  fontSize: {
    default: "16px",
    small: "14px",
    large: "18px"
  }
}

type ColorType = keyof typeof theme.colors
type BackgroundColorType = keyof typeof theme.backgroundColor
type FontSizeType = keyof typeof theme.fontSize

interface Props {
  color?: ColorType;
  backgroundColor?: BackgroundColorType;
  fontSize?:FontSizeType;
}

const ButtonWrap = styled.button<Omit<Props, "onClick">>`
  color: ${({ color }) => theme.color[color ?? "default"]}
`

------------------------------------------------------------------------------------------------------------

Record 개선

type Category = "한식" | "일식"

interface Food {
  name: string;
}

const foodByCategory: Record<Category, Food[]> = {
  한식: [{name: "제육"}],
  일식: [{name: "초밥"}, {name: "텐동"}]
}

------------------------------------------------------------------------------------------------------------