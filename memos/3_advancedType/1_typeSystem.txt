------------------------------------------------------------------------------------------------------------

타입스크립트는 독자적인 타입시스템을 가짐
=> any라는 타입은 js에 없음
=> 하지만 js는 기본적으로 any처럼 동작

------------------------------------------------------------------------------------------------------------

1. any
=> js에 존재하는 모든 값을 오류없이 받을 수 있음
=> js의 기본동작과 일치

=> 남용시 정적타이핑을 무색하게 만듦
=> 기본적으로 지양해야 하지만 대표적으로 3가지 경우에는 사용해야 한다.

[1] 개발단계에서 임시로 값을 지정
=> 세부 항목에 대한 타입이 확정되지 않은 경우, 경고없이 일단 개발
=> 세부 스펙이 나오는 시점에 대체, 누락되지 않게 조심

[2] 어떤 값이 넘어올지 정할 수 없음
=> 외부 라이브러리, API의 타입이 명확하지 않아 파악이 힘든 경우

[3] 값을 예측할 수 없을 때

------------------------------------------------------------------------------------------------------------

2. unknown
=> any와 유사하게 모든 타입의 값을 할당 가능
=> 하지만 any이외의 타입의 변수에 unknown 타입의 값을 할당 불가

=> 무엇이 할당될지 모름, any랑 비슷한데 의미가??
=> 할당은 받을 수 있지만 실행시 에러가 발생
=> 사용전에 타입을 명시/식별해야 함
=> any의 자유분방함을 보완

let unknwonVal: unknown

unknwonVal = 100;
unknwonVal = "hello world";

let someVal1: any = unknwonVal;    // 가능
let someVal2: number = unknwonVal; // 불가
let someVal3: string = unknwonVal; // 불가

------------------------------------------------------------------------------------------------------------

3. void
=> 함수가 값을 명시적으로 리턴하지 않음
=> undefined나 null만 할당가능

------------------------------------------------------------------------------------------------------------

4. never
=> 값을 반환할 수 없는 타입
=> 어떤 값도 할당될 수 없음

1. 항상 에러를 던지는 경우는 값을 반환하지 않는것
2. 무한히 실행되는 경우 (무한루프)

------------------------------------------------------------------------------------------------------------

5. Array타입
=> js의 배열은 어떤 타입이든 원소로서 허용
=> ts의 정적타이핑과는 부합 X
=> 선언은 Array, []를 사용

const array: Array<number> = [1, 2, 3];
const array: Array<number | string> = [1, "string"];
const array: number[] | string[] = [1, "string"];
const array: (number[] | string)[] = [1, "string"];

=> 튜플을 쓰면 길이 / 순서까지 제한
=> 구조분해할당시 객체보다 이름을 상황에 알맞게 지정가능한 유연성이 강함

let tuple: [number] = [1];
let tuple: [number, string, boolean] = [1, "string", true];

const httpStatusFromPaths: [number, string, ...string[]] = [
  400,
  "Bad Request",
  "/users/:id",
  "/users/:userId",
]

const optionalTuple1 = [number. number, number?] = [1,2]
const optionalTuple1 = [number. number, number?] = [1,2,3]

------------------------------------------------------------------------------------------------------------

6. enum
=> ts에서 지원하는 특수한 타입인 열거형
=> 주로 문자열 상수를 생성하는 사용
=> 변수에 할당시 모든 멤버를 값으로 받을 수 있음

=> 역방향 접근도 가능
=> const enum으로 선언하면 역방향 접근 막힘
enum ProgrammingLanguage {
  Typescript, // 0
  Javascript, // 1
}
ProgrammingLanguage.Typescript; // 0
ProgrammingLanguage.Javascript; // 1
ProgrammingLanguage[1]; // "Javascript"

=> 문자열 상수가 좀더 안전
const enum STRING_NUMBER {
  ONE = "ONE",
  TWO = "TWO",
}

=> 타입공간, 값공간에서 모두 사용
=> 즉시실행함수로 변환, 트리쉐이킹이 잘 안될 수 있다.

------------------------------------------------------------------------------------------------------------