------------------------------------------------------------------------------------------------------------

타입시스템 
=> 타입 검사기가 프로그램에 타입을 할당하는데 사용하는 규칙 집합
=> 두가지로 구분됨

1. 컴파일러에 명시적으로 타입을 알려줘야하는 타입시스템
2. 자동으로 타입을 추론하는 타입시스템

TS는 두가지 모두를 지원

------------------------------------------------------------------------------------------------------------

타입 어노테이션
=> 변수, 상수, 함수 인자/리턴값에 타입을 명시적으로 선언하여
   컴파일러에게 직접 알려주는 문법
=> ts는 변수뒤에 입력

let isDone: boolean = false;
let decimal: number = 6;

------------------------------------------------------------------------------------------------------------

구조적 타이핑
=> java는 명목적인 타입언어로 클래스로 구체적 타입을 명시
=> 상속관계나 공통인터페이스가 없으면 타입끼리 호환 X

=> ts는 구조로 타입을 구분
=> 객체가 가지고 있는 프로퍼티를 기반으로 타입을 구분
   타입에 부합하는 프로퍼티, 메소드만 있으면 해당 타입으로 간주
=> js의 덕타이핑을 기반으로 계승

!!! 예제1 !!!
interface Pet {
  name: string
}

interface Cat {
  name: string
  age: number
}

let pet: Pet
let cat: Cat = { name: "Zag", age: 2  }
pet = cat; // cat이 name을 가지므로 OK
!!! 예제1 !!!


!!! 예제2 !!!
class Person {
  naeme: string
  age: number

  constructor(name: string, age: number) {
    this.name = name
    this.age = age
  }
}

class Developer {
  name: string;
  age: number;
  sleepTime: number;

  constructor(name: string, age: number, sleepTime: number) {
    this.name = name;
    this.age = age;
    this.sleepTime = sleepTime;
  }
}

const greet = (p: Person) => {
  console.log(`Hello, I'm${p.name}`)
}
const developer = new Developer("zig", 20, 7);
greet(developer); // name과 age가 있으므로 OK
!!! 예제2 !!!

------------------------------------------------------------------------------------------------------------

값 공간과 타입 공간의 네임스페이스는 서로 충돌하지 않는다
런타임에 제거됨

type Developer = { isWorking: true }; // 런타임에 제거됨
const Developer = { isTyping: true }; // OK


하지만 클래스와 enum은 런타임에도 객체 및 값으로써 존재한다

enum WeekDays {
 Mon = "Mon",
 TUES = "Tues",
 WEDENS = "Wedens",
 THURS = "Thurs",
 FRI = "Fri"
}
type WeekDaysKey = keyof typeof WeekDays; // "MON" | "TUES" | ...

function printDay(key: WeekDaysKey, message: string) {
  const day = WeekDays[key];
  if(day <= WeekDays.WEDENS) {
    console.log(`It's still ${day}day, ${message}`)
  }
}
printDay("TUES", "wanna go home")

------------------------------------------------------------------------------------------------------------

타입 확인
=> typeof, instanceof, 타입단언을 통해 확인

1. typeof 연산자
=> 피연산자의 데이터 타입을 나타내는 문자열 리턴
=> primitive type, "Function", "object"
=> ts에서 값에서 쓰일때와 타입에서 쓰일때 역할이 다름
=> 값공간과 타입공간이 별도로 존재해서 그렇다

// 값으로 쓰임
const v1 = typeof person; // "object"
v2 = typeof email; // "function"

// 타입에서 사용
type T1 = typeof person; // Person
type T2 = typeof email; // (options:{ person:Person; subject: string; body: string; }) => void


2. instanceof 연산자
=> 프로토타입체이닝 어딘가에 생성자의 프로토타입 속성이 존재하는 판단가능
=> boolean을 리턴

3. 타입단언
=> as키워드를 사용, 강제 형변환과 유사

---------------------------------------------------------------------------------