---------------------------

JS의 탄생
=> 프로토타입 기반 상속개념을 가진 객체지향언어인 Self와
   Lisp의 일급함수 개념을 차용한 경량 언어
=> 출시 처음엔 저평가

=> 브라우져와 js 환경이 천차만별이었고 발전속도도 서로 달라
   어지러워서 폴리필과 트랜스파일 개념이 나오기도 함
=> 크로스브라우징까지 해결해주는 jQuery가 대세
=> 결국 EcmaScript라는 이름의 표준화가 등장

폴리필    : 브라우져가 지원하지 않는 코드를 사용할 수 있게 
          변환한 코드 조각이나 플러그인
트랜스파일 : 최신버전의 코드를 예전버전의 코드로 변환하는 과정
  
---------------------------

웹사이트 vs 웹앱
=> 사이트는 수집된 데이터 및 정보를 특정페이지에 표시하는 정적인 웹
   (단방향, 상호작용 X, 정적인 컨텐츠)
=> 웹앱은 사용자와 상호작용하는 쌍방향 소통의 웹

---------------------------

Ajax로 페이지 재요청없이 컨텐츠 전환
JS 표준화와 웹앱의 대두로 컴포넌트 개발론이 대두
=> 컴포넌트는 하나의 독립된 기능을 재사용하기 위한 코드 묶음

---------------------------

이렇게 점점 복잡한걸 개발하기 시작하니 js의 한계가 명확

js는 동적 타입언어이다
=> 변수에 타입을 명시적으로 지정하지 않고 런타임에 
   값 할당시 변수타입이 결정됨 
=> js는 너무 관대해서 개발자 의도와 다르게 동작하기 너무 쉽다

해결방안이 나오긴 함

JSDoc
=> 모듈, 네임스페이스, 클래스등에 대한 API문서 생성 도구
=> 힌트 제공, 타입체킹 및 에러확인도 가능
=> 하지만 주석의 성격이 강하므로 강제성 부여가 애매

propTypes
=> 리액트 컴포넌트 props의 타입을 검사
=> props는 잘 잡아주지만, App전체에 대한 타입검사는 불가

---------------------------

TS의 등장
=> JS의 슈퍼셋 언어인 Ts가 공개

1. 정적타이핑 제공으로 => 안정성보장
2. 자동완성기능      => 개발생산성 향상
3. 슈퍼셋 언어       => 점진적 도입이 가능


---------------------------